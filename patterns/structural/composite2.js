// Generated by CoffeeScript 1.6.2
(function() {
  var Composite, Composite2, SuperComposite, leaf1, leaf2, leaf3, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SuperComposite = (function() {
    function SuperComposite() {}

    return SuperComposite;

  })();

  SuperComposite.prototype.common = function() {
    return console.log("Now we all have same methods");
  };

  SuperComposite.prototype.method = function() {
    return console.log("Same method");
  };

  Composite = (function(_super) {
    __extends(Composite, _super);

    function Composite() {
      _ref = Composite.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Composite;

  })(SuperComposite);

  Composite2 = (function(_super) {
    __extends(Composite2, _super);

    function Composite2() {
      _ref1 = Composite2.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Composite2;

  })(SuperComposite);

  leaf1 = new Composite();

  leaf2 = new Composite2();

  leaf3 = new Composite();

  leaf1.common();

  leaf2.common();

}).call(this);
